/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{namespace buck.tutorial}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Tutorials' /}
    {param navid: 'learning_tutorial' /}
    {param prettify: true /}
    {param description}
      A more in-depth tutorial on using Buck on a given platform.
    {/param}
    {param content}

<div class="{css overview}">

<p>
  This expanded tutorial shows extended concepts about using Buck to build a project after you have installed Buck, including creating a project, building a project, packaging a project, etc.
</p>

<p>
<blockquote>
<strong>
  Currently this tutorial is Android specific for either Mac or Linux. We will be adding iOS, Java and Windows specific tutorial information in the near future.
</strong>
</blockquote>
</p>

<div class="toggler">
  <table>
    <tr>
      <td><span><strong>Platform:</strong></span></td>
      <td>
        <a href="javascript:void(0);" class="button-android" onclick="display('platform', 'android')">Android</a>
        <a href="javascript:void(0);" class="button-macos" onclick="display('platform', 'macos')">MacOS</a>
        <a href="javascript:void(0);" class="button-linuxos" onclick="display('platform', 'linuxos')">Linux</a>
      </td>
    </tr>
    <tr>
      <td><span><strong>Development OS:</strong></span></td>
      <td>
        <a href="javascript:void(0);" class="button-mac" onclick="display('os', 'mac')">macOS</a>
        <a href="javascript:void(0);" class="button-linux" onclick="display('os', 'linux')">Linux</a>
      </td>
    </tr>
    <tr>
      <td><span><strong>Language:</strong></span></td>
      <td>
        <a href="javascript:void(0);" class="button-java" onclick="display('language', 'java')">Java</a>
        <a href="javascript:void(0);" class="button-kotlin" onclick="display('language', 'kotlin')">Kotlin</a>
        <a href="javascript:void(0);" class="button-rust" onclick="display('language', 'rust')">Rust</a>
      </td>
    </tr>
  </table>
</div>

<span><block class="macos mac linuxos linux android java kotlin rust" /></span>
<h2>Path Setup</h2>

<p>
  Add Buck to your <code>$PATH</code> and set up {call buck.buckd /}:
</p>

{literal}
<pre>
sudo ln -s ${PWD}/bin/buck /usr/bin/buck
sudo ln -s ${PWD}/bin/buckd /usr/bin/buckd
</pre>
{/literal}

<h2>Create Project</h2>

<p>
  We are going to build a sample application. We should start our project in an empty directory, so create a new one and navigate to it:
</p>

{literal}<pre>
mkdir -p ~/my-first-buck-project/
cd ~/my-first-buck-project/
</pre>{/literal}

<p>
<blockquote>
  <strong>Note: the following instructions will now assume that all commands are run from your <code>~/my-first-buck-project</code> directory.</strong>
</blockquote>
</p>

<h2>Compile Your Code</h2>

<span><block class="mac linux android java kotlin" /></span>
<p>
  Android applications are typically written in Java and kotlin, so the first thing we will do is to configure Buck to compile code against the Android API. To do so, Buck needs to know where your Android SDK is. Assuming that your Android SDK is installed in <code>~/android-sdk</code>, run the following command to set a <code>ANDROID_SDK</code> environment variable that tells Buck where to find your Android SDK:
</p>

{literal}<pre>
export ANDROID_SDK=$HOME/android-sdk
</pre>{/literal}

<span><block class="mac linux android java" /></span>
<p>
  Now that Buck can locate your Android SDK, it is time to compile some Java code. First, we create a simple <code>Activity</code> at <code>java/com/example/activity/MyFirstActivity.java</code>:
</p>

{literal}<pre>
mkdir -p java/com/example/activity/
echo "package com.example.activity;

import android.app.Activity;
import android.os.Bundle;

public class MyFirstActivity extends Activity {

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
  }
}" > java/com/example/activity/MyFirstActivity.java
</pre>{/literal}

<p>
  Now we need a build file that defines a build rule to compile this Java code, so we create an <code><a href="rule/android_library.html">android_library()</a></code> rule in <code>java/com/example/activity/BUCK</code>:
</p>

{literal}<pre>
echo "android_library(
  name = 'activity',
  srcs = glob(['*.java']),
  visibility = [ 'PUBLIC' ],
)" > java/com/example/activity/BUCK
</pre>{/literal}

<p>
  Now we can compile our Java code using Buck:
</p>

<pre>buck build{sp}//java/com/example/activity:activity</pre>

<p>
<blockquote>
  Buck generates its output in the <code>buck-out</code> directory, so this is a good time to specify <code>buck-out</code> as something that should be ignored by your version control system.
</blockquote>
</p>

<span><block class="mac linux android kotlin" /></span>
<p>
  Now that Buck can locate your Android SDK, it is time to compile some kotlin code. First, we create a simple <code>Activity</code> at <code>kotlin/com/example/activity/MyFirstActivity.kt</code>:
</p>

{literal}<pre>
mkdir -p kotlin/com/example/activity/
echo "package com.example.activity

import android.app.Activity
import android.os.Bundle

class MyFirstActivity : Activity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
    }
}" > kotlin/com/example/activity/MyFirstActivity.kt
</pre>{/literal}

<p>
  Now we need a build file that defines a build rule to compile this kotlin code, so we create an <code><a href="rule/android_library.html">android_library()</a></code> rule in <code>kotlin/com/example/activity/BUCK</code>:
</p>

{literal}<pre>
echo "android_library(
  name = 'activity',
  srcs = glob(['*.kt']),
  language = "KOTLIN",
  visibility = [ 'PUBLIC' ],
)" > kotlin/com/example/activity/BUCK
</pre>{/literal}

<p>
  Now we can compile our Java code using Buck:
</p>

<pre>buck build{sp}//kotlin/com/example/activity:activity</pre>

<p>
<blockquote>
  Buck generates its output in the <code>buck-out</code> directory, so this is a good time to specify <code>buck-out</code> as something that should be ignored by your version control system.
</blockquote>
</p>

<span><block class="mac linux linuxos macos kotlin rust " /></span>
<p>
  First, we create rust source files and directories:
</p>
{literal}<pre>
mkdir -p src/front_of_house
echo "mod front_of_house;

pub use crate::front_of_house::hosting;
pub use crate::front_of_house::serving;

fn main() {
    hosting::add_to_waitlist();
    hosting::seat_at_table();
    serving::take_order();
    serving::serve_order();
    serving::take_payment();
}" > src/main.rs

echo "pub mod hosting;
pub mod serving;" > src/front_of_house.rs

echo "pub fn add_to_waitlist() {
    println!(\"Added to watinglist.\");
}

pub fn seat_at_table() {
    println!(\"Seated at table.\");
}" > src/front_of_house/hosting.rs

echo "pub fn take_order() {
    println!(\"Ordered.\");
}

pub fn serve_order() {
    println!(\"Order served.\");
}

pub fn take_payment() {
    println!(\"Payment done.\");
}" > src/front_of_house/serving.rs
</pre>{/literal}

<p>
  Now we need a build file that defines a build rule to compile this rust code, so we create an <code><a href="rule/rust_binary.html">rust_binary()</a></code> rule in <code>BUCK</code>:
{literal}<pre>
echo "rust_binary(
    name = 'restaurant',
    srcs = glob(
        ['src/**/*.rs'],
    ),
)" >BUCK
</pre>{/literal}
</p>

<p>
Now we can build our rust code using Buck:
</p>

<pre>buck build{sp}:restaurant</pre>

<p>
And run the sample:
</p>
<pre>buck run{sp}:restaurant</pre>

<p>
<blockquote>
  Buck generates its output in the <code>buck-out</code> directory, so this is a good time to specify <code>buck-out</code> as something that should be ignored by your version control system.
</blockquote>
</p>

<span><block class="mac linux android java kotlin" /></span>
<h2>Package Resources</h2>

<p>
  Android applications frequently contain resources, such as strings and images. For this example, we will create a trivial Android resource bundle that contains a single string:
</p>

{literal}<pre>
mkdir -p res/com/example/activity/res/values/
echo "&lt;?xml version='1.0' encoding='utf-8' ?>
&lt;resources>
  &lt;string name='app_name'>Hello World&lt;/string>
&lt;/resources>" > res/com/example/activity/res/values/strings.xml
</pre>{/literal}

<p>
  Buck needs a way to reference this collection of resources, so we need to create a build file that defines an {call buck.android_resource /} rule:
</p>

{literal}<pre>
echo "android_resource(
  name = 'res',
  res = subdir_glob([('res', '**')]),
  package = 'com.example',
  visibility = [
    '//apps/myapp:',
  ],
)" > res/com/example/activity/BUCK
</pre>{/literal}

<h2>Create a Keystore</h2>

<p>
  In practice, you will want to be able to test your Android app on a physical Android device, which means that it needs to be signed. We will create app-specific information, such as the key and manifest, in its own directory to keep things tidy:
</p>

<pre>mkdir -p apps/myapp/</pre>

<p>
  To keep things simple, we will create a self-signed certificate for debugging.
</p>

<p>
<blockquote>
  Unfortunately, this is not a one-liner because there is a number of prompts from the <code>keytool</code> command.
</blockquote>
</p>

{literal}<pre>
keytool -genkey -keystore apps/myapp/debug.keystore -alias my_alias \
    -keyalg RSA -keysize 2048 -validity 10000
</pre>{/literal}

<p>
  When prompted for a keystore password, just use <code>android</code> (and then type it again to confirm it), and hit <code>Enter</code> to accept the default values for name, organizational unit, etc.
</p>

<p>
  Then create a <code>.properties</code> file that stores all of this information:
</p>

{literal}<pre>
echo "key.alias=my_alias
key.store.password=android
key.alias.password=android" > apps/myapp/debug.keystore.properties
</pre>{/literal}

<h2>Build an APK</h2>

<p>
 An Android application needs a manifest named <code>AndroidManifest.xml</code>, so we must create such a file:
</p>

{literal}<pre>
echo "&lt;?xml version='1.0' encoding='utf-8'?>
&lt;manifest xmlns:android='http://schemas.android.com/apk/res/android'
          package='com.example'
          >

  &lt;application
      android:label='@string/app_name'
      android:hardwareAccelerated='true'>
    &lt;activity android:name='.activity.MyFirstActivity'>
      &lt;intent-filter>
        &lt;action android:name='android.intent.action.MAIN' />
        &lt;category android:name='android.intent.category.LAUNCHER' />
      &lt;/intent-filter>
    &lt;/activity>
  &lt;/application>

&lt;/manifest>" > apps/myapp/AndroidManifest.xml
</pre>{/literal}

<p>
  Now we define an {call buck.android_binary /} and {call buck.keystore /} rule in our build file:
</p>

{literal}<pre>
echo "android_binary(
  name = 'app',
  manifest = 'AndroidManifest.xml',
  manifest_entries = {
    'version_code': 1,
    'version_name': '1.0',
    'min_sdk_version': 26,
    'target_sdk_version': 29
  },
  keystore = ':debug_keystore',
  deps = [
    '//java/com/example/activity:activity',
    '//res/com/example/activity:res',
  ],
)

keystore(
  name = 'debug_keystore',
  store = 'debug.keystore',
  properties = 'debug.keystore.properties',
)" > apps/myapp/BUCK
</pre>{/literal}

<p>
  Building an {call buck.android_binary /} rule will produce an APK:
</p>

<pre>buck build{sp}//apps/myapp:app</pre>

<p>
  Alternatively, if you have an Android device connected to your computer, you can build and install the APK in one step with {call buck.cmd_install /}:
</p>

<pre>buck install{sp}//apps/myapp:app</pre>

<h2>Create an Alias</h2>

<p>
  Typing <code>buck build{sp}//apps/myapp:app</code> every time you want to rebuild your APK can be tedious. Fortunately, Buck makes it possible to define an <em>alias</em> for a build target. An alias can always be used in place of a build target when using Buck's command-line interface.
</p>

<p>
  Aliases must be defined in the {call buckconfig.alias /} a config file in the root of the project:
</p>

{literal}<pre>
echo "[alias]
    app = //apps/myapp:app" > .buckconfig
</pre>{/literal}

<p>
  With this alias in place, the command to build and install the APK is much shorter and easier to remember:
</p>

<pre>buck install app</pre>

<span><block class="mac linux android java" /></span>
<h2>Create an IntelliJ Project</h2>

<p>
  You likely want to develop your Android app using an IDE. Fortunately, Buck can generate an IntelliJ project from the build rules you defined in your build files.
</p>

<p>
  In order to ensure that IntelliJ recognizes where your Java folders
  are, you need to specify the {call buckconfig.java_src_roots /} in
  your {call buck.buckconfig_link /} file:
</p>

{literal}<pre>
echo "[java]
    src_roots = /java/" >> .buckconfig
</pre>{/literal}

<p>
  Now you can create the IntelliJ project by running {call buck.cmd_project /}:
</p>

<pre>buck project --ide intellij</pre>

<p>
  Note that you will likely want to exclude these generated files from version control, so add the following to your <code>.gitignore</code> file (or <code>.hgignore</code> if you are using Mercurial) along with the files generated by {call buck.buckd /}:
</p>

{literal}<pre>
echo "/.buckd
/buck-out
*.iml
/.idea/compiler.xml
/.idea/libraries/*.xml
/.idea/modules.xml
/.idea/runConfigurations/Debug_Buck_test.xml" > .gitignore
</pre>{/literal}

<p>
  Now you can build your Android application from either IntelliJ or the command line.
</p>

</div> // close overview

    {/param}
  {/call}

{literal}
<script>
// Convert <div>...<span><block /></span>...</div>
// Into <div>...<block />...</div>
var blocks = document.getElementsByTagName('block');
for (var i = 0; i < blocks.length; ++i) {
  var block = blocks[i];
  var span = blocks[i].parentNode;
  var container = span.parentNode;
  container.insertBefore(block, span);
  container.removeChild(span);
}
// Convert <div>...<block />content<block />...</div>
// Into <div>...<block>content</block><block />...</div>
blocks = document.getElementsByTagName('block');
for (var i = 0; i < blocks.length; ++i) {
  var block = blocks[i];
  while (block.nextSibling && block.nextSibling.tagName !== 'BLOCK') {
    block.appendChild(block.nextSibling);
  }
}
function display(type, value) {
  var container = document.getElementsByTagName('block')[0].parentNode;
  container.className = 'disp-' + type + '-' + value + ' ' +
    container.className.replace(RegExp('disp-' + type + '-[a-z]+ ?'), '');
}

// If we are coming to the page with a hash in it (i.e. from a search, for example), try to get
// us as close as possible to the correct platform and dev os using the hashtag and block walk up.
var foundHash = false;
if (window.location.hash !== '' && window.location.hash !== 'content') { // content is default
  var hashLinks = document.querySelectorAll('a.hash-link');
  for (var i = 0; i < hashLinks.length && !foundHash; ++i) {
    if (hashLinks[i].hash === window.location.hash) {
      var parent = hashLinks[i].parentElement;
      while (parent) {
        if (parent.tagName === 'BLOCK') {
          var devOS = null;
          var targetPlatform = null;
          var languageToUse = null;
          // Could be more than one target os and dev platform, but just choose some sort of order
          // of priority here.

          // Dev OS
          if (parent.className.indexOf('mac') > -1) {
            devOS = 'mac';
          } else if (parent.className.indexOf('linux') > -1) {
            devOS = 'linux';
          } else if (parent.className.indexOf('windows') > -1) {
            devOS = 'windows';
          } else {
            break; // assume we don't have anything.
          }

          // Target Platform
          if (parent.className.indexOf('ios') > -1) {
            targetPlatform = 'ios';
          } else if (parent.className.indexOf('android') > -1) {
            targetPlatform = 'android';
          } else {
            break; // assume we don't have anything.
          }

          // Language
          if (parent.className.indexOf('java') > -1) {
            languageToUse = 'java';
          } else if (parent.className.indexOf('kotlin') > -1) {
            languageToUse = 'kotlin';
          } else {
            break;
          }

          // We would have broken out if both targetPlatform and devOS hadn't been filled.
          display('os', devOS);
          display('platform', targetPlatform);
          display('language', languageToUse);
          foundHash = true;
          break;
        }
        parent = parent.parentElement;
      }
    }
  }
}
// Do the default if there is no matching hash
if (!foundHash) {
  var isMac = navigator.platform.toLowerCase().indexOf('mac') !== -1;
  var isLinux = navigator.platform.toLowerCase().indexOf('linux') !== -1;
  display('os', isMac ? 'mac' : (isLinux ? 'linux' : 'windows'));
  display('platform', 'android');
  display('language', 'java');
}
</script>
{/literal}

{/template}
